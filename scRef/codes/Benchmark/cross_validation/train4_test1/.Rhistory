Colv=F, Rowv=F, dendrogram="none",
col=rev(colorRampPalette(brewer.pal(11, "RdYlGn"))(256)),
# cexCol=1,
key = T, keysize=1,density.info="none",
main=NULL,
margins = c(3, 4),
trace="none")
dev.off()
} else {
print('Matrix of heatmap have only 1 rows')
print(dim(sub_norm)[1])
}
##### enrichment analysis
levels <- c('L2', 'L3')
for (level in levels) {
if (level == 'L2') {
df.db.KEGG <- df.db.KEGG.L2
df.gene.set <- df.gene.set.L2
p.cutoff <- 0.05
}
if (level == 'L3') {
df.db.KEGG <- df.db.KEGG.L3
df.gene.set <- df.gene.set.L3
p.cutoff <- 0.01
}
# depleted in treat
vec.sig <- rep(0, dim(df.KEGG)[1])
names(vec.sig) <- row.names(df.KEGG)
for (KO_id in row.names(df.KEGG)) {
if (KO_id %in% enriched) {
vec.sig[KO_id] <- 1
}
}
if (sum(vec.sig) > 0) {
df.enrich <- data.frame()
for (pathway in names(df.db.KEGG)) {
df.fisher <- data.frame(sig = vec.sig,
pathway = df.db.KEGG[,pathway])
table.fisher <- xtabs(~ sig + pathway, data = df.fisher)
out.fisher <- fisher.test(table.fisher)
df.enrich <- rbind(df.enrich,
data.frame(pathway = pathway,
pvalue = out.fisher$p.value))
}
df.enrich$qvalue <- p.adjust(df.enrich$pvalue)
# write enrichment results
file.control <- paste0(path.plot, "/Enrich_", level, "_control_", sub.time,
paste0(as.character(vec.dose), collapse = ''),
".txt")
write.table(df.enrich, file = file.control, quote = F, sep = '\t')
df.enrich.sig <- df.enrich[df.enrich$pvalue < p.cutoff,]
if (dim(df.enrich.sig)[1] > 1) {
df.enrich.sig$lgp <- -log10(df.enrich.sig$pvalue)
plot.deplete <-
ggplot(data = df.enrich.sig, aes(x = pathway, y = lgp)) +
geom_bar(stat = 'identity') +
labs(y = '-log(Pvalue)', x = 'Pathway', title = 'Enriched in Control') +
coord_flip()
ggsave(filename = paste0("/pathway_", level, "_treat_deplete_", sub.time,
paste0(as.character(vec.dose), collapse = ''), ".png"),
path = path.plot, plot = plot.deplete)
}
}
# enriched in treat
vec.sig <- rep(0, dim(df.KEGG)[1])
names(vec.sig) <- row.names(df.KEGG)
for (KO_id in row.names(df.KEGG)) {
if (KO_id %in% depleted) {
vec.sig[KO_id] <- 1
}
}
if (sum(vec.sig) > 0) {
df.enrich <- data.frame()
for (pathway in names(df.db.KEGG)) {
df.fisher <- data.frame(sig = vec.sig,
pathway = df.db.KEGG[,pathway])
table.fisher <- xtabs(~ sig + pathway, data = df.fisher)
out.fisher <- fisher.test(table.fisher)
df.enrich <- rbind(df.enrich,
data.frame(pathway = pathway,
pvalue = out.fisher$p.value))
}
df.enrich$qvalue <- p.adjust(df.enrich$pvalue)
# write enrichment results
file.treat <- paste0(path.plot, "/Enrich_", level, "_treatment_", sub.time,
paste0(as.character(vec.dose), collapse = ''),
".txt")
write.table(df.enrich, file = file.treat, quote = F, sep = '\t')
df.enrich.sig <- df.enrich[df.enrich$pvalue < p.cutoff,]
if (dim(df.enrich.sig)[1] > 1) {
df.enrich.sig$lgp <- -log10(df.enrich.sig$pvalue)
plot.enrich <-
ggplot(data = df.enrich.sig, aes(x = pathway, y = lgp)) +
geom_bar(stat = 'identity') +
labs(y = '-log(Pvalue)', x = 'Pathway', title = 'Enriched in treat') +
coord_flip()
ggsave(filename = paste0("/pathway_", level, "_treat_enrich_", sub.time,
paste0(as.character(vec.dose), collapse = ''), ".png"),
path = path.plot, plot = plot.enrich)
}
}
# GSEA
# filter results
res.edgeR.L <- res.edgeR
res.edgeR.L$KO_id <- row.names(res.edgeR.L)
df.counts.mean <- data.frame(KO_id = row.names(sub.KEGG),
mean_counts = rowMeans(sub.KEGG))
res.edgeR.L <- merge(res.edgeR.L, df.counts.mean, by = 'KO_id')
row.names(res.edgeR.L) <- res.edgeR.L$KO_id
# res.edgeR.L$pvalue <- res.edgeR.L$PValue
# res.edgeR.L$pvalue[res.edgeR.L$mean_counts < 5] <- 1
res.edgeR.L <- res.edgeR.L[res.edgeR.L$mean_counts > 10,]
# res.edgeR.L$qvalue <- p.adjust(res.edgeR.L$PValue, method = 'fdr')
res.edgeR.L$logPval <- log10(res.edgeR.L$PValue) *
(res.edgeR.L$logFC / abs(res.edgeR.L$logFC))
geneList <- res.edgeR.L$logPval
names(geneList) <- row.names(res.edgeR.L)
geneList[is.na(geneList)] <- 0
geneList <- geneList[order(geneList, decreasing = T)]
egmt <- GSEA(geneList, TERM2GENE = df.gene.set, pvalueCutoff = 0.9)
res.egmt <- egmt@result
# vec.KO <- strsplit(
#     res.egmt['Photosynthesis - antenna proteins', 'core_enrichment'], '/')[[1]]
# res.edgeR.L[vec.KO,]
file.GSEA <- paste0(path.plot, "/GSEA_", level, "_", sub.time,
paste0(as.character(vec.dose), collapse = ''),
".txt")
write.table(res.egmt, file = file.GSEA, quote = F, sep = '\t', row.names = F)
}
}
# time series
path.plot <- paste0('/home/drizzle_zhang/microbiome/result/9.PICRUSt/heatmap_',
gender, '_', type.cutoff)
if (!file.exists(path.plot)) {
dir.create(path.plot)
}
series.time <- unique(df.meta$Time)
files.res <- foreach(sub.time = series.time, .combine = rbind) %dopar%
find.sig.KO(df.meta.gender, df.db.KEGG.L2, df.db.KEGG.L3,
df.gene.set.L2, df.gene.set.L3,
path.plot, vec.dose, type.cutoff, sub.time)
View(df.KEGG)
library(ggplot2)
library(muted)
# meta file
meta.file <- '/home/drizzle_zhang/microbiome/result/meta_sample.out.txt'
df.meta <- read.delim(meta.file, stringsAsFactors = FALSE)
# KEGG
file.KEGG.L3 <- '/home/drizzle_zhang/microbiome/result/9.PICRUSt/origin_data/KO_KEGG_L3.txt'
df.db.KEGG <- read.delim(file.KEGG.L3, row.names = 1, header = F,
stringsAsFactors = F)
names.KEGG.L3 <- as.character(df.db.KEGG[1,])
names(df.db.KEGG) <- names.KEGG.L3
df.db.KEGG <- df.db.KEGG[-1,]
# cutoff
type.cutoff <- 'fdr'
# dose
# vec.dose <- c(0, 1, 2, 3)
vec.dose <- c(0, 3)
# time series
series.time <- unique(df.meta$Time)
############################# GSEA
level <- 'L3'
# male
gender <- 'male'
df.meta.gender <- df.meta[df.meta$Gender == gender, ]
path.plot <- paste0('/home/drizzle_zhang/microbiome/result/9.PICRUSt/heatmap_',
gender, '_', type.cutoff)
df.GSEA <- data.frame(ID = names.KEGG.L3)
for (sub.time in series.time) {
file.GSEA <- paste0(path.plot, "/GSEA_", level, "_", sub.time,
paste0(as.character(vec.dose), collapse = ''),
".txt")
sub.GSEA <- read.delim(file.GSEA, row.names = 1)
sub.GSEA$logPval <- log10(sub.GSEA$pvalue) *
(sub.GSEA$enrichmentScore / abs(sub.GSEA$enrichmentScore))
sub.GSEA <- sub.GSEA[, c("Description", "logPval")]
names(sub.GSEA) <- c("ID", sub.time)
df.GSEA <- merge(df.GSEA, sub.GSEA, by = 'ID', all = T)
}
row.names(df.GSEA) <- df.GSEA$ID
df.GSEA$ID <- NULL
df.GSEA[is.na(df.GSEA)] <- 0
# sort
df.sort <- data.frame(stringsAsFactors = F)
for (row in row.names(df.GSEA)) {
for (col in 1:length(names(df.GSEA))) {
if (!col %in% c(1, 13)) {
df.sort <- rbind(df.sort, data.frame(pathway = row, time = col,
value = df.GSEA[row, col],
stringsAsFactors = F))
}
}
}
df.sort$ID <- paste(df.sort$pathway, df.sort$time, sep = '_')
df.sort <- df.sort[order(df.sort$value),]
sort.value <- df.sort$value
df.ks <- data.frame(stringsAsFactors = F)
for (pathway in names.KEGG.L3) {
sub.sort <- df.sort[df.sort$pathway == pathway, 'value']
enrich.control <- ks.test(sub.sort, sort.value, alternative = 'less')
enrich.treat <- ks.test(sub.sort, sort.value, alternative = 'greater')
df.ks <- rbind(df.ks, data.frame(pathway = pathway,
pvalue.control = enrich.control$p.value,
pvalue.treat = enrich.treat$p.value))
}
df.ks$qvalue.control <- p.adjust(df.ks$pvalue.control, method = 'fdr')
df.ks$qvalue.treat <- p.adjust(df.ks$pvalue.treat, method = 'fdr')
# use ks score to plot
df.ks.male <- df.ks
df.ks.male.filter <- df.ks.male[
df.ks.male$qvalue.control < 0.1 | df.ks.male$qvalue.treat < 0.1,]
log10Pval <- c()
for (i in row.names(df.ks.male.filter)) {
pvalue.control <- -log10(df.ks.male.filter[i, 'pvalue.control'])
pvalue.treat <- -log10(df.ks.male.filter[i, 'pvalue.treat'])
if (pvalue.control > pvalue.treat) {
log10Pval <- c(log10Pval, pvalue.control)
} else {
log10Pval <- c(log10Pval, -pvalue.treat)
}
}
df.ks.male.filter$log10Pval <- log10Pval
df.ks.male.filter <- df.ks.male.filter[
order(df.ks.male.filter$log10Pval, decreasing = T), ]
vec.color <- c()
for (pval in df.ks.male.filter$log10Pval) {
if (pval > 0) {
vec.color <- c(vec.color, 'Enrich in Control')
} else {
vec.color <- c(vec.color, 'Enrich in Treatment')
}
}
df.ks.male.filter$color <- vec.color
plot.male <-
ggplot(data = df.ks.male.filter, aes(x = reorder(pathway, X = log10Pval),
y = log10Pval, fill = color)) +
geom_bar(stat = 'identity') +
labs(x = 'Pathway', y = '-log10(Pvalue)', fill = '') +
coord_flip() +
theme(panel.background = element_rect(color = 'gray', size = 1.5,
fill = 'transparent'),
panel.grid.major.y = element_line(colour = "gray", size = 0.1,
linetype = 2),
axis.text.x = element_text(size = 9))
ggsave(filename = paste0("/Combine_Sum_GSEA_",
paste0(as.character(vec.dose), collapse = ''), ".png"),
path = path.plot, plot = plot.male,
height = 12, width = 24, units = 'cm')
# heatmap
df.GSEA.male <- df.GSEA[as.character(df.ks.male.filter$pathway),]
df.heatmap.male <- data.frame(stringsAsFactors = F)
for (pathway in row.names(df.GSEA.male)) {
for (sub.time in names(df.GSEA.male)) {
df.heatmap.male <-
rbind(df.heatmap.male,
data.frame(pathway = pathway, time = sub.time,
score = df.GSEA.male[pathway, sub.time],
stringsAsFactors = F))
}
}
df.heatmap.male$pathway <-
factor(df.heatmap.male$pathway,
levels = as.character(df.ks.male.filter$pathway), ordered = T)
plot.heatmap.male <-
ggplot(data = df.heatmap.male,
aes(x = time, y = pathway, fill = score)) +
geom_tile() +
scale_fill_gradient2(low = muted("blue"), high = muted("red")) +
labs(x = 'Time', y = 'Pathway', fill = 'Enrichment Score') +
theme(panel.background = element_rect(color = 'white', size = 1.5,
fill = 'transparent'),
axis.ticks = element_blank(),
axis.text.x = element_text(size = 9),
legend.text = element_text(size = 12))
ggsave(filename = paste0("/Combine_Heatmap_GSEA_",
paste0(as.character(vec.dose), collapse = ''), ".png"),
path = path.plot, plot = plot.heatmap.male,
height = 12, width = 20, units = 'cm')
library(scales)
plot.heatmap.male <-
ggplot(data = df.heatmap.male,
aes(x = time, y = pathway, fill = score)) +
geom_tile() +
scale_fill_gradient2(low = muted("blue"), high = muted("red")) +
labs(x = 'Time', y = 'Pathway', fill = 'Enrichment Score') +
theme(panel.background = element_rect(color = 'white', size = 1.5,
fill = 'transparent'),
axis.ticks = element_blank(),
axis.text.x = element_text(size = 9),
legend.text = element_text(size = 12))
ggsave(filename = paste0("/Combine_Heatmap_GSEA_",
paste0(as.character(vec.dose), collapse = ''), ".png"),
path = path.plot, plot = plot.heatmap.male,
height = 12, width = 20, units = 'cm')
file.MCA <- '/home/drizzle_zhang/scRef/try_data/MCA_combined_mouse_uniform.txt'
df.MCA <- read.table(file.MCA, header=T, row.names=1, sep='\t', check.name=F)
=
=
errorCondition('123')
fpm.MCA <- fpm(obj.DESeq.MCA, robust = T)
BiocManager::install('SingleR')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
install.packages("SingleR")
devtools::install_github("pcahan1/singleCellNet")
install.packages('igraph')
install.packages('xgboost')
TrueLabelsPath <- paste0(OutputDir, 'singleCellNet_True_Labels.csv')
PredLabelsPath <- paste0(OutputDir, 'singleCellNet_Pred_Labels.csv')
res.singleCellNet <- evaluate(TrueLabelsPath, PredLabelsPath)
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
BiocManager::install("MAST")
BiocManager::install("MAST")
setwd('/home/drizzle_zhang/my_git/scRef/Benchmark/cross_validation/train4_test1')
source('./Cross_Validation.R')
source('./method_functions.R')
source('./evaluate.R')
path.input <- '/home/drizzle_zhang/scRef/'
path.output <- '/home/drizzle_zhang/scRef/cross_validation/train4_test1/'
# generate cross validation dataset
LabelsPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat_cluster_original.txt')
OutputDir <- path.output
# Cross_Validation(LabelsPath, OutputDir)
DataPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat.txt')
LabelsPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat_cluster_original.txt')
CV_RDataPath <- paste0(path.output, 'CV_folds.RData')
# heatmap
df.heatmap <- data.frame(stringsAsFactors = F)
# SingleR
# run_SingleR(DataPath,LabelsPath,CV_RDataPath,OutputDir)
TrueLabelsPath <- paste0(OutputDir, 'SingleR_True_Labels.csv')
PredLabelsPath <- paste0(OutputDir, 'SingleR_Pred_Labels.csv')
res.SingleR <- evaluate(TrueLabelsPath, PredLabelsPath)
df.sub <- data.frame(term = names(res.SingleR$F1),
method = rep('SingleR', length(res.SingleR$F1)),
value = res.SingleR$F1, stringsAsFactors = F)
df.sub <- rbind(df.sub,
data.frame(term = 'macro F1', method = 'SingleR',
value = res.SingleR$Mean_F1, stringsAsFactors = F))
df.sub <- rbind(df.sub,
data.frame(term = 'Accuracy', method = 'SingleR',
value = res.SingleR$Acc, stringsAsFactors = F))
df.heatmap <- rbind(df.heatmap, df.sub)
# scmap
# run_scmap(DataPath,LabelsPath,CV_RDataPath,OutputDir)
TrueLabelsPath <- paste0(OutputDir, 'scmapcell_True_Labels.csv')
PredLabelsPath <- paste0(OutputDir, 'scmapcell_Pred_Labels.csv')
res.scmapcell <- evaluate(TrueLabelsPath, PredLabelsPath)
df.sub <- data.frame(term = names(res.scmapcell$F1),
method = rep('scmap-cell', length(res.scmapcell$F1)),
value = res.scmapcell$F1, stringsAsFactors = F)
df.sub <- rbind(df.sub,
data.frame(term = 'macro F1', method = 'scmap-cell',
value = res.scmapcell$Mean_F1, stringsAsFactors = F))
df.sub <- rbind(df.sub,
data.frame(term = 'Accuracy', method = 'scmap-cell',
value = res.scmapcell$Acc, stringsAsFactors = F))
df.heatmap <- rbind(df.heatmap, df.sub)
PredLabelsPath <- paste0(OutputDir, 'scmapcluster_Pred_Labels.csv')
res.scmapcluster <- evaluate(TrueLabelsPath, PredLabelsPath)
df.sub <- data.frame(term = names(res.scmapcluster$F1),
method = rep('scmap-cluster', length(res.scmapcluster$F1)),
value = res.scmapcluster$F1, stringsAsFactors = F)
df.sub <- rbind(df.sub,
data.frame(term = 'macro F1', method = 'scmap-cluster',
value = res.scmapcluster$Mean_F1, stringsAsFactors = F))
df.sub <- rbind(df.sub,
data.frame(term = 'Accuracy', method = 'scmap-cluster',
value = res.scmapcluster$Acc, stringsAsFactors = F))
df.heatmap <- rbind(df.heatmap, df.sub)
# CHETAH
# run_CHETAH(DataPath,LabelsPath,CV_RDataPath,OutputDir)
TrueLabelsPath <- paste0(OutputDir, 'CHETAH_True_Labels.csv')
PredLabelsPath <- paste0(OutputDir, 'CHETAH_Pred_Labels.csv')
res.CHETAH <- evaluate(TrueLabelsPath, PredLabelsPath)
df.sub <- data.frame(term = names(res.CHETAH$F1),
method = rep('CHETAH', length(res.CHETAH$F1)),
value = res.CHETAH$F1, stringsAsFactors = F)
df.sub <- rbind(df.sub,
data.frame(term = 'macro F1', method = 'CHETAH',
value = res.CHETAH$Mean_F1, stringsAsFactors = F))
df.sub <- rbind(df.sub,
data.frame(term = 'Accuracy', method = 'CHETAH',
value = res.CHETAH$Acc, stringsAsFactors = F))
df.heatmap <- rbind(df.heatmap, df.sub)
# scPred
# run_scPred(DataPath,LabelsPath,CV_RDataPath,OutputDir)
TrueLabelsPath <- paste0(OutputDir, 'scPred_True_Labels.csv')
PredLabelsPath <- paste0(OutputDir, 'scPred_Pred_Labels.csv')
res.scPred <- evaluate(TrueLabelsPath, PredLabelsPath)
df.sub <- data.frame(term = names(res.scPred$F1),
method = rep('scPred', length(res.scPred$F1)),
value = res.scPred$F1, stringsAsFactors = F)
df.sub <- rbind(df.sub,
data.frame(term = 'macro F1', method = 'scPred',
value = res.scPred$Mean_F1, stringsAsFactors = F))
df.sub <- rbind(df.sub,
data.frame(term = 'Accuracy', method = 'scPred',
value = res.scPred$Acc, stringsAsFactors = F))
df.heatmap <- rbind(df.heatmap, df.sub)
# sciBet
# run_sciBet(DataPath,LabelsPath,CV_RDataPath,OutputDir)
TrueLabelsPath <- paste0(OutputDir, 'sciBet_True_Labels.csv')
PredLabelsPath <- paste0(OutputDir, 'sciBet_Pred_Labels.csv')
res.sciBet <- evaluate(TrueLabelsPath, PredLabelsPath)
df.sub <- data.frame(term = names(res.sciBet$F1),
method = rep('sciBet', length(res.sciBet$F1)),
value = res.sciBet$F1, stringsAsFactors = F)
df.sub <- rbind(df.sub,
data.frame(term = 'macro F1', method = 'sciBet',
value = res.sciBet$Mean_F1, stringsAsFactors = F))
df.sub <- rbind(df.sub,
data.frame(term = 'Accuracy', method = 'sciBet',
value = res.sciBet$Acc, stringsAsFactors = F))
df.heatmap <- rbind(df.heatmap, df.sub)
# scRef
# run_scRef(DataPath,LabelsPath,CV_RDataPath,OutputDir)
TrueLabelsPath <- paste0(OutputDir, 'scRef_True_Labels.csv')
# PredLabelsPath <- paste0(OutputDir, 'scRef_Pred_Labels_cell.csv')
PredLabelsPath <- paste0(OutputDir, 'scRef_Pred_Labels.csv')
res.scRef <- evaluate(TrueLabelsPath, PredLabelsPath)
df.sub <- data.frame(term = names(res.scRef$F1),
method = rep('scRef', length(res.scRef$F1)),
value = res.scRef$F1, stringsAsFactors = F)
df.sub <- rbind(df.sub,
data.frame(term = 'macro F1', method = 'scRef',
value = res.scRef$Mean_F1, stringsAsFactors = F))
df.sub <- rbind(df.sub,
data.frame(term = 'Accuracy', method = 'scRef',
value = res.scRef$Acc, stringsAsFactors = F))
df.heatmap <- rbind(df.heatmap, df.sub)
# singleCellNet
# run_singleCellNet(DataPath,LabelsPath,CV_RDataPath,OutputDir)
TrueLabelsPath <- paste0(OutputDir, 'singleCellNet_True_Labels.csv')
PredLabelsPath <- paste0(OutputDir, 'singleCellNet_Pred_Labels.csv')
res.singleCellNet <- evaluate(TrueLabelsPath, PredLabelsPath)
df.sub <- data.frame(term = names(res.singleCellNet$F1),
method = rep('singleCellNet', length(res.singleCellNet$F1)),
value = res.singleCellNet$F1, stringsAsFactors = F)
df.sub <- rbind(df.sub,
data.frame(term = 'macro F1', method = 'singleCellNet',
value = res.singleCellNet$Mean_F1, stringsAsFactors = F))
df.sub <- rbind(df.sub,
data.frame(term = 'Accuracy', method = 'singleCellNet',
value = res.singleCellNet$Acc, stringsAsFactors = F))
df.heatmap <- rbind(df.heatmap, df.sub)
# CaSTLe
# run_CaSTLe(DataPath,LabelsPath,CV_RDataPath,OutputDir)
TrueLabelsPath <- paste0(OutputDir, 'CaSTLe_True_Labels.csv')
PredLabelsPath <- paste0(OutputDir, 'CaSTLe_Pred_Labels.csv')
res.CaSTLe <- evaluate(TrueLabelsPath, PredLabelsPath)
df.sub <- data.frame(term = names(res.CaSTLe$F1),
method = rep('CaSTLe', length(res.CaSTLe$F1)),
value = res.CaSTLe$F1, stringsAsFactors = F)
df.sub <- rbind(df.sub,
data.frame(term = 'macro F1', method = 'CaSTLe',
value = res.CaSTLe$Mean_F1, stringsAsFactors = F))
df.sub <- rbind(df.sub,
data.frame(term = 'Accuracy', method = 'CaSTLe',
value = res.CaSTLe$Acc, stringsAsFactors = F))
df.heatmap <- rbind(df.heatmap, df.sub)
# scID
# run_scID(DataPath,LabelsPath,CV_RDataPath,OutputDir)
TrueLabelsPath <- paste0(OutputDir, 'scID_True_Labels.csv')
PredLabelsPath <- paste0(OutputDir, 'scID_Pred_Labels.csv')
res.scID <- evaluate(TrueLabelsPath, PredLabelsPath)
df.sub <- data.frame(term = names(res.scID$F1),
method = rep('scID', length(res.scID$F1)),
value = res.scID$F1, stringsAsFactors = F)
df.sub <- rbind(df.sub,
data.frame(term = 'macro F1', method = 'scID',
value = res.scID$Mean_F1, stringsAsFactors = F))
df.sub <- rbind(df.sub,
data.frame(term = 'Accuracy', method = 'scID',
value = res.scID$Acc, stringsAsFactors = F))
df.heatmap <- rbind(df.heatmap, df.sub)
unique.term <- unique(df.heatmap$term)
df.heatmap$term <- factor(df.heatmap$term, levels = unique.term)
df.acc <- df.heatmap[df.heatmap$term == 'Accuracy', ]
df.heatmap$method <- factor(df.heatmap$method,
levels = df.acc$method[order(df.acc$value, decreasing = T)])
# plot heatmap
library(ggplot2)
plot.heatmap <- ggplot(data = df.heatmap, aes(method, term)) +
geom_tile(aes(fill = value)) +
scale_fill_continuous(low = "#FFFAFA", high = "#A52A2A") +
theme_bw() +
theme(
axis.ticks = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank(),
axis.title = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.6)
) +
geom_text(aes(label = round(value, 2)), family = "Arial", size = 2.5)
path <- '/home/drizzle_zhang/scRef/cross_validation/train4_test1'
ggsave(filename = 'heatmap.png', path = path, plot = plot.heatmap,
units = 'cm', height = 10, width = 18)
