library(gplots)
library(RColorBrewer)
sel.meta <- df.meta.gender[df.meta.gender$Time == sub.time,]
sel.meta <- sel.meta[sel.meta$Dose %in% vec.dose,]
use.sample <- sel.meta$Sample
sub.KEGG <- df.KEGG[, use.sample]
factor.group <- as.factor(sel.meta$Group)
d = DGEList(counts=sub.KEGG, group=factor.group)
d = calcNormFactors(d)
# 生成实验设计矩阵
design.mat = model.matrix(~ 0 + d$samples$group)
dimnames(design.mat)[[2]] <- levels(factor.group)
d2 = estimateGLMCommonDisp(d, design.mat)
d2 = estimateGLMTagwiseDisp(d2, design.mat)
fit = glmFit(d2, design.mat)
# 设置比较组
BvsA <- makeContrasts(
contrasts = paste(levels(factor.group), collapse = '-'),
levels=design.mat)
# 组间比较,统计Fold change, Pvalue
lrt = glmLRT(fit,contrast=BvsA)
# FDR检验，控制假阳性率小于5%
de_lrt = decideTestsDGE(lrt, adjust.method="fdr", p.value=0.05)
# 导出计算结果
res.edgeR=lrt$table
res.edgeR$sig.edger=de_lrt
vec.sig <- rep(0, dim(res.edgeR)[1])
vec.sig[(res.edgeR$logFC > 1) & (res.edgeR$PValue < 0.05)] <- 1
vec.sig[(res.edgeR$logFC < -1) & (res.edgeR$PValue < 0.05)] <- -1
res.edgeR$sig <- vec.sig
if (type.cutoff == 'fdr') {
enriched = row.names(subset(res.edgeR, sig.edger==1))
depleted = row.names(subset(res.edgeR, sig.edger==-1))
} else {
enriched = row.names(subset(res.edgeR, sig==1))
depleted = row.names(subset(res.edgeR, sig==-1))
}
# write results
# bool.fc <- rep(0, dim(res.edgeR)[1])
# bool.fc[abs(res.edgeR$logFC) > 1.5] <- 1
# res.edgeR$bool.fc <- bool.fc
file.res <- paste0(path.plot, "/OUT_edgeR_", sub.time,
paste0(as.character(vec.dose), collapse = ''),
".txt")
# res.edgeR$qvalue <- p.adjust(res.edgeR$PValue, method = 'fdr')
res.edgeR <- res.edgeR[order(res.edgeR$logFC), ]
write.table(res.edgeR, file = file.res, quote = F, sep = '\t')
# 热图展示差异OTU
# pair_group = subset(sub_design, genotype %in% c("OE", "WT"))
# Sig OTU in two genotype
DE <- c(enriched,depleted)
sub_norm <- as.matrix(sub.KEGG[DE, ])
if (dim(sub_norm)[1] > 1) {
#colnames(sub_norm)=gsub("DM","KO",colnames(sub_norm),perl=TRUE) # rename samples ID
pdf(file = paste0(path.plot, "/heatmap_", sub.time,
paste0(as.character(vec.dose), collapse = ''),
".pdf"),
height = 10, width = 15)
heatmap.2(sub_norm, scale="row",
Colv=F, Rowv=F, dendrogram="none",
col=rev(colorRampPalette(brewer.pal(11, "RdYlGn"))(256)),
# cexCol=1,
key = T, keysize=1,density.info="none",
main=NULL,
margins = c(3, 4),
trace="none")
dev.off()
} else {
print('Matrix of heatmap have only 1 rows')
print(dim(sub_norm)[1])
}
##### enrichment analysis
levels <- c('L2', 'L3')
for (level in levels) {
if (level == 'L2') {
df.db.KEGG <- df.db.KEGG.L2
df.gene.set <- df.gene.set.L2
p.cutoff <- 0.05
}
if (level == 'L3') {
df.db.KEGG <- df.db.KEGG.L3
df.gene.set <- df.gene.set.L3
p.cutoff <- 0.01
}
# depleted in treat
vec.sig <- rep(0, dim(df.KEGG)[1])
names(vec.sig) <- row.names(df.KEGG)
for (KO_id in row.names(df.KEGG)) {
if (KO_id %in% enriched) {
vec.sig[KO_id] <- 1
}
}
if (sum(vec.sig) > 0) {
df.enrich <- data.frame()
for (pathway in names(df.db.KEGG)) {
df.fisher <- data.frame(sig = vec.sig,
pathway = df.db.KEGG[,pathway])
table.fisher <- xtabs(~ sig + pathway, data = df.fisher)
out.fisher <- fisher.test(table.fisher)
df.enrich <- rbind(df.enrich,
data.frame(pathway = pathway,
pvalue = out.fisher$p.value))
}
df.enrich$qvalue <- p.adjust(df.enrich$pvalue)
# write enrichment results
file.control <- paste0(path.plot, "/Enrich_", level, "_control_", sub.time,
paste0(as.character(vec.dose), collapse = ''),
".txt")
write.table(df.enrich, file = file.control, quote = F, sep = '\t')
df.enrich.sig <- df.enrich[df.enrich$pvalue < p.cutoff,]
if (dim(df.enrich.sig)[1] > 1) {
df.enrich.sig$lgp <- -log10(df.enrich.sig$pvalue)
plot.deplete <-
ggplot(data = df.enrich.sig, aes(x = pathway, y = lgp)) +
geom_bar(stat = 'identity') +
labs(y = '-log(Pvalue)', x = 'Pathway', title = 'Enriched in Control') +
coord_flip()
ggsave(filename = paste0("/pathway_", level, "_treat_deplete_", sub.time,
paste0(as.character(vec.dose), collapse = ''), ".png"),
path = path.plot, plot = plot.deplete)
}
}
# enriched in treat
vec.sig <- rep(0, dim(df.KEGG)[1])
names(vec.sig) <- row.names(df.KEGG)
for (KO_id in row.names(df.KEGG)) {
if (KO_id %in% depleted) {
vec.sig[KO_id] <- 1
}
}
if (sum(vec.sig) > 0) {
df.enrich <- data.frame()
for (pathway in names(df.db.KEGG)) {
df.fisher <- data.frame(sig = vec.sig,
pathway = df.db.KEGG[,pathway])
table.fisher <- xtabs(~ sig + pathway, data = df.fisher)
out.fisher <- fisher.test(table.fisher)
df.enrich <- rbind(df.enrich,
data.frame(pathway = pathway,
pvalue = out.fisher$p.value))
}
df.enrich$qvalue <- p.adjust(df.enrich$pvalue)
# write enrichment results
file.treat <- paste0(path.plot, "/Enrich_", level, "_treatment_", sub.time,
paste0(as.character(vec.dose), collapse = ''),
".txt")
write.table(df.enrich, file = file.treat, quote = F, sep = '\t')
df.enrich.sig <- df.enrich[df.enrich$pvalue < p.cutoff,]
if (dim(df.enrich.sig)[1] > 1) {
df.enrich.sig$lgp <- -log10(df.enrich.sig$pvalue)
plot.enrich <-
ggplot(data = df.enrich.sig, aes(x = pathway, y = lgp)) +
geom_bar(stat = 'identity') +
labs(y = '-log(Pvalue)', x = 'Pathway', title = 'Enriched in treat') +
coord_flip()
ggsave(filename = paste0("/pathway_", level, "_treat_enrich_", sub.time,
paste0(as.character(vec.dose), collapse = ''), ".png"),
path = path.plot, plot = plot.enrich)
}
}
# GSEA
# filter results
res.edgeR.L <- res.edgeR
res.edgeR.L$KO_id <- row.names(res.edgeR.L)
df.counts.mean <- data.frame(KO_id = row.names(sub.KEGG),
mean_counts = rowMeans(sub.KEGG))
res.edgeR.L <- merge(res.edgeR.L, df.counts.mean, by = 'KO_id')
row.names(res.edgeR.L) <- res.edgeR.L$KO_id
# res.edgeR.L$pvalue <- res.edgeR.L$PValue
# res.edgeR.L$pvalue[res.edgeR.L$mean_counts < 5] <- 1
res.edgeR.L <- res.edgeR.L[res.edgeR.L$mean_counts > 10,]
# res.edgeR.L$qvalue <- p.adjust(res.edgeR.L$PValue, method = 'fdr')
res.edgeR.L$logPval <- log10(res.edgeR.L$PValue) *
(res.edgeR.L$logFC / abs(res.edgeR.L$logFC))
geneList <- res.edgeR.L$logPval
names(geneList) <- row.names(res.edgeR.L)
geneList[is.na(geneList)] <- 0
geneList <- geneList[order(geneList, decreasing = T)]
egmt <- GSEA(geneList, TERM2GENE = df.gene.set, pvalueCutoff = 0.9)
res.egmt <- egmt@result
# vec.KO <- strsplit(
#     res.egmt['Photosynthesis - antenna proteins', 'core_enrichment'], '/')[[1]]
# res.edgeR.L[vec.KO,]
file.GSEA <- paste0(path.plot, "/GSEA_", level, "_", sub.time,
paste0(as.character(vec.dose), collapse = ''),
".txt")
write.table(res.egmt, file = file.GSEA, quote = F, sep = '\t', row.names = F)
}
}
# time series
path.plot <- paste0('/home/drizzle_zhang/microbiome/result/9.PICRUSt/heatmap_',
gender, '_', type.cutoff)
if (!file.exists(path.plot)) {
dir.create(path.plot)
}
series.time <- unique(df.meta$Time)
files.res <- foreach(sub.time = series.time, .combine = rbind) %dopar%
find.sig.KO(df.meta.gender, df.db.KEGG.L2, df.db.KEGG.L3,
df.gene.set.L2, df.gene.set.L3,
path.plot, vec.dose, type.cutoff, sub.time)
View(df.KEGG)
library(ggplot2)
library(muted)
# meta file
meta.file <- '/home/drizzle_zhang/microbiome/result/meta_sample.out.txt'
df.meta <- read.delim(meta.file, stringsAsFactors = FALSE)
# KEGG
file.KEGG.L3 <- '/home/drizzle_zhang/microbiome/result/9.PICRUSt/origin_data/KO_KEGG_L3.txt'
df.db.KEGG <- read.delim(file.KEGG.L3, row.names = 1, header = F,
stringsAsFactors = F)
names.KEGG.L3 <- as.character(df.db.KEGG[1,])
names(df.db.KEGG) <- names.KEGG.L3
df.db.KEGG <- df.db.KEGG[-1,]
# cutoff
type.cutoff <- 'fdr'
# dose
# vec.dose <- c(0, 1, 2, 3)
vec.dose <- c(0, 3)
# time series
series.time <- unique(df.meta$Time)
############################# GSEA
level <- 'L3'
# male
gender <- 'male'
df.meta.gender <- df.meta[df.meta$Gender == gender, ]
path.plot <- paste0('/home/drizzle_zhang/microbiome/result/9.PICRUSt/heatmap_',
gender, '_', type.cutoff)
df.GSEA <- data.frame(ID = names.KEGG.L3)
for (sub.time in series.time) {
file.GSEA <- paste0(path.plot, "/GSEA_", level, "_", sub.time,
paste0(as.character(vec.dose), collapse = ''),
".txt")
sub.GSEA <- read.delim(file.GSEA, row.names = 1)
sub.GSEA$logPval <- log10(sub.GSEA$pvalue) *
(sub.GSEA$enrichmentScore / abs(sub.GSEA$enrichmentScore))
sub.GSEA <- sub.GSEA[, c("Description", "logPval")]
names(sub.GSEA) <- c("ID", sub.time)
df.GSEA <- merge(df.GSEA, sub.GSEA, by = 'ID', all = T)
}
row.names(df.GSEA) <- df.GSEA$ID
df.GSEA$ID <- NULL
df.GSEA[is.na(df.GSEA)] <- 0
# sort
df.sort <- data.frame(stringsAsFactors = F)
for (row in row.names(df.GSEA)) {
for (col in 1:length(names(df.GSEA))) {
if (!col %in% c(1, 13)) {
df.sort <- rbind(df.sort, data.frame(pathway = row, time = col,
value = df.GSEA[row, col],
stringsAsFactors = F))
}
}
}
df.sort$ID <- paste(df.sort$pathway, df.sort$time, sep = '_')
df.sort <- df.sort[order(df.sort$value),]
sort.value <- df.sort$value
df.ks <- data.frame(stringsAsFactors = F)
for (pathway in names.KEGG.L3) {
sub.sort <- df.sort[df.sort$pathway == pathway, 'value']
enrich.control <- ks.test(sub.sort, sort.value, alternative = 'less')
enrich.treat <- ks.test(sub.sort, sort.value, alternative = 'greater')
df.ks <- rbind(df.ks, data.frame(pathway = pathway,
pvalue.control = enrich.control$p.value,
pvalue.treat = enrich.treat$p.value))
}
df.ks$qvalue.control <- p.adjust(df.ks$pvalue.control, method = 'fdr')
df.ks$qvalue.treat <- p.adjust(df.ks$pvalue.treat, method = 'fdr')
# use ks score to plot
df.ks.male <- df.ks
df.ks.male.filter <- df.ks.male[
df.ks.male$qvalue.control < 0.1 | df.ks.male$qvalue.treat < 0.1,]
log10Pval <- c()
for (i in row.names(df.ks.male.filter)) {
pvalue.control <- -log10(df.ks.male.filter[i, 'pvalue.control'])
pvalue.treat <- -log10(df.ks.male.filter[i, 'pvalue.treat'])
if (pvalue.control > pvalue.treat) {
log10Pval <- c(log10Pval, pvalue.control)
} else {
log10Pval <- c(log10Pval, -pvalue.treat)
}
}
df.ks.male.filter$log10Pval <- log10Pval
df.ks.male.filter <- df.ks.male.filter[
order(df.ks.male.filter$log10Pval, decreasing = T), ]
vec.color <- c()
for (pval in df.ks.male.filter$log10Pval) {
if (pval > 0) {
vec.color <- c(vec.color, 'Enrich in Control')
} else {
vec.color <- c(vec.color, 'Enrich in Treatment')
}
}
df.ks.male.filter$color <- vec.color
plot.male <-
ggplot(data = df.ks.male.filter, aes(x = reorder(pathway, X = log10Pval),
y = log10Pval, fill = color)) +
geom_bar(stat = 'identity') +
labs(x = 'Pathway', y = '-log10(Pvalue)', fill = '') +
coord_flip() +
theme(panel.background = element_rect(color = 'gray', size = 1.5,
fill = 'transparent'),
panel.grid.major.y = element_line(colour = "gray", size = 0.1,
linetype = 2),
axis.text.x = element_text(size = 9))
ggsave(filename = paste0("/Combine_Sum_GSEA_",
paste0(as.character(vec.dose), collapse = ''), ".png"),
path = path.plot, plot = plot.male,
height = 12, width = 24, units = 'cm')
# heatmap
df.GSEA.male <- df.GSEA[as.character(df.ks.male.filter$pathway),]
df.heatmap.male <- data.frame(stringsAsFactors = F)
for (pathway in row.names(df.GSEA.male)) {
for (sub.time in names(df.GSEA.male)) {
df.heatmap.male <-
rbind(df.heatmap.male,
data.frame(pathway = pathway, time = sub.time,
score = df.GSEA.male[pathway, sub.time],
stringsAsFactors = F))
}
}
df.heatmap.male$pathway <-
factor(df.heatmap.male$pathway,
levels = as.character(df.ks.male.filter$pathway), ordered = T)
plot.heatmap.male <-
ggplot(data = df.heatmap.male,
aes(x = time, y = pathway, fill = score)) +
geom_tile() +
scale_fill_gradient2(low = muted("blue"), high = muted("red")) +
labs(x = 'Time', y = 'Pathway', fill = 'Enrichment Score') +
theme(panel.background = element_rect(color = 'white', size = 1.5,
fill = 'transparent'),
axis.ticks = element_blank(),
axis.text.x = element_text(size = 9),
legend.text = element_text(size = 12))
ggsave(filename = paste0("/Combine_Heatmap_GSEA_",
paste0(as.character(vec.dose), collapse = ''), ".png"),
path = path.plot, plot = plot.heatmap.male,
height = 12, width = 20, units = 'cm')
library(scales)
plot.heatmap.male <-
ggplot(data = df.heatmap.male,
aes(x = time, y = pathway, fill = score)) +
geom_tile() +
scale_fill_gradient2(low = muted("blue"), high = muted("red")) +
labs(x = 'Time', y = 'Pathway', fill = 'Enrichment Score') +
theme(panel.background = element_rect(color = 'white', size = 1.5,
fill = 'transparent'),
axis.ticks = element_blank(),
axis.text.x = element_text(size = 9),
legend.text = element_text(size = 12))
ggsave(filename = paste0("/Combine_Heatmap_GSEA_",
paste0(as.character(vec.dose), collapse = ''), ".png"),
path = path.plot, plot = plot.heatmap.male,
height = 12, width = 20, units = 'cm')
file.MCA <- '/home/drizzle_zhang/scRef/try_data/MCA_combined_mouse_uniform.txt'
df.MCA <- read.table(file.MCA, header=T, row.names=1, sep='\t', check.name=F)
=
=
errorCondition('123')
fpm.MCA <- fpm(obj.DESeq.MCA, robust = T)
BiocManager::install('SingleR')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
install.packages("SingleR")
devtools::install_github("pcahan1/singleCellNet")
install.packages('igraph')
install.packages('xgboost')
TrueLabelsPath <- paste0(OutputDir, 'singleCellNet_True_Labels.csv')
PredLabelsPath <- paste0(OutputDir, 'singleCellNet_Pred_Labels.csv')
res.singleCellNet <- evaluate(TrueLabelsPath, PredLabelsPath)
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
devtools::install_github("BatadaLab/scID")
BiocManager::install("MAST")
BiocManager::install("MAST")
setwd('/home/drizzle_zhang/my_git/scRef/Benchmark/cross_validation/train1_test4_add_noise_delete_cell')
source('./Cross_Validation.R')
source('./method_functions.R')
source('./evaluate.R')
path.input <- '/home/drizzle_zhang/scRef/'
path.output <- '/home/drizzle_zhang/scRef/cross_validation/train1_test4_add_noise_delete_cell/'
# generate cross validation dataset
LabelsPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat_cluster_original.txt')
OutputDir <- path.output
if (!file.exists(OutputDir)) {
dir.create(OutputDir)
}
# delete cells
del.cells <- c('endothelial-mural', 'microglia')
Labels <- as.matrix(read.delim(LabelsPath, row.names = 1, header = T))
Labels <- as.vector(Labels[,col_Index])
col_Index = 1
Labels <- as.vector(Labels[,col_Index])
Removed_classes <- !(table(Labels) > 10)
Cells_to_Keep <- !(is.element(Labels,names(Removed_classes)[Removed_classes]))
Labels <- Labels[Cells_to_Keep]
library(rBayesianOptimization)
n_folds = 5
Folds <- KFold(Labels,nfolds = n_folds, stratified = TRUE)
Test_Folds <- c(n_folds:1)
Train_Idx <- list()
Test_Idx <- list()
View(Folds)
i=1
sub_train <- Folds[Test_Folds[i]]
View(sub_train)
sub_train <- unlist(Folds[Test_Folds[i]])
sub_train <- sub_train[!(Labels[sub_train] %in% del.cells)]
head(Labels[sub_train])
a <- !(Labels[sub_train] %in% del.cells)
View(a)
# delete cells
del.cells <- c('endothelial-mural', 'microglia')
sub_train <- sub_train[!(Labels[sub_train] %in% del.cells)]
a <- Labels[sub_train]
View(Folds)
setwd('/home/drizzle_zhang/my_git/scRef/Benchmark/cross_validation/train1_test4_add_noise_delete_cell')
source('./Cross_Validation.R')
source('./method_functions.R')
source('./evaluate.R')
path.input <- '/home/drizzle_zhang/scRef/'
path.output <- '/home/drizzle_zhang/scRef/cross_validation/train1_test4_add_noise_delete_cell/'
# generate cross validation dataset
LabelsPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat_cluster_original.txt')
OutputDir <- path.output
if (!file.exists(OutputDir)) {
dir.create(OutputDir)
}
# delete cells
del.cells <- c('endothelial-mural', 'microglia')
Cross_Validation(LabelsPath, OutputDir, del.cells)
Labels <- as.matrix(read.delim(LabelsPath, row.names = 1, header = T))
Labels <- as.vector(Labels[,col_Index])
Removed_classes <- !(table(Labels) > 10)
Cells_to_Keep <- !(is.element(Labels,names(Removed_classes)[Removed_classes]))
Labels <- Labels[Cells_to_Keep]
# Getting training and testing Folds
library(rBayesianOptimization)
n_folds = 5
Folds <- KFold(Labels,nfolds = n_folds, stratified = TRUE)
Test_Folds <- c(n_folds:1)
Train_Idx <- list()
Test_Idx <- list()
for (i in c(1:length(Folds))){
Temp_Folds <- Folds
Temp_Folds[Test_Folds[i]] <- NULL
sub_train <- unlist(Folds[Test_Folds[i]])
sub_train <- sub_train[!(Labels[sub_train] %in% del.cells)]
Train_Idx[i] <- sub_train
Test_Idx[i] <- list(unlist(Temp_Folds))
# Train_Idx[i] <- list(unlist(Temp_Folds))
# Test_Idx[i] <- Folds[Test_Folds[i]]
}
Train_Idx <- list()
Test_Idx <- list()
for (i in c(1:length(Folds))){
Temp_Folds <- Folds
Temp_Folds[Test_Folds[i]] <- NULL
sub_train <- unlist(Folds[Test_Folds[i]])
sub_train <- list(sub_train[!(Labels[sub_train] %in% del.cells)])
Train_Idx[i] <- sub_train
Test_Idx[i] <- list(unlist(Temp_Folds))
# Train_Idx[i] <- list(unlist(Temp_Folds))
# Test_Idx[i] <- Folds[Test_Folds[i]]
}
View(Folds)
setwd('/home/drizzle_zhang/my_git/scRef/Benchmark/cross_validation/train1_test4_add_noise_delete_cell')
source('./Cross_Validation.R')
source('./method_functions.R')
source('./evaluate.R')
path.input <- '/home/drizzle_zhang/scRef/'
path.output <- '/home/drizzle_zhang/scRef/cross_validation/train1_test4_add_noise_delete_cell/'
# generate cross validation dataset
LabelsPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat_cluster_original.txt')
OutputDir <- path.output
if (!file.exists(OutputDir)) {
dir.create(OutputDir)
}
# delete cells
del.cells <- c('endothelial-mural', 'microglia')
Cross_Validation(LabelsPath, OutputDir, del.cells)
DataPath.origin <- paste0(path.input, 'summary/Zeisel_exp_sc_mat.txt')
############
# add noise
Data <- read.delim(DataPath.origin,row.names = 1)
set.seed(123)
addNOI=function(x){
M=mean(x)
y=x+M/3*(runif(length(x))*2-1)
return(y)
}
nData=t(apply(Data,1,addNOI))
nData[which(nData<0)]=0
rownames(nData)=rownames(Data)
colnames(nData)=colnames(Data)
nData <- round(nData, digits = 4)
file.noise <- paste0(OutputDir, 'Data_noise.txt')
write.table(nData, file = file.noise, sep = '\t')
############
DataPath <- paste0(OutputDir, 'Data_noise.txt')
CV_RDataPath <- paste0(path.output, 'CV_folds.RData')
