#!/usr/bin/env python
# _*_ coding: utf-8 _*_
# @author: Drizzle_Zhang
# @file: download_sra.py
# @time: 2018/10/22 11:37

import subprocess
from time import time
import sys
import os
from multiprocessing import Pool
from functools import partial


def gzip(path_out, file_fq):
    if file_fq[-3:] == ".gz":
        return
    else:
        path_fq = os.path.join(path_out, file_fq)
        if os.path.exists(path_fq):
            os.system(f"gzip {path_fq}")
        return


def download(ls_sra, path_out, path_tmp, process):
    with open(ls_sra, 'r') as fi:
        downlist = []
        for line in fi:
            tmp_line = line.strip().split(',')
            if tmp_line[0] != 'Run':
                downlist.append(tmp_line[0])

    subprocesses = []
    for i, one in enumerate(downlist):
        if i % process == 0:
            for sub_process in subprocesses:
                sub_process.wait()
            subprocesses = []
            if i % (5 * process) == 0:
                fastq_files = os.listdir(path_out)
                pool = Pool(processes=(5 * process))
                func_gzip = partial(gzip, path_out)
                pool.map(func_gzip, fastq_files)
                pool.close()
        if os.path.exists(os.path.join(path_out, one + ".fastq")):
            continue
        elif os.path.exists(os.path.join(path_out, one + "_1.fastq")):
            continue
        elif os.path.exists(os.path.join(path_out, one + "_2.fastq")):
            continue
        elif os.path.exists(os.path.join(path_out, one + ".fastq.gz")):
            continue
        elif os.path.exists(os.path.join(path_out, one + "_2.fastq.gz")):
            continue
        elif os.path.exists(os.path.join(path_out, one + "_1.fastq.gz")):
            continue
        else:
            subprocesses.append(
                subprocess.Popen(
                    f"fasterq-dump --split-3 {one} -O {path_out} "
                    f"-t {path_tmp} -e 5",
                    shell=True))
            print(one)

    for sub_process in subprocesses:
        sub_process.wait()
    fastq_files = os.listdir(path_out)
    pool = Pool(processes=process)
    func_gzip = partial(gzip, path_out)
    pool.map(func_gzip, fastq_files)
    pool.close()

    return


if __name__ == '__main__':
    start = time()
    download(sys.argv[1], sys.argv[2], sys.argv[3], int(sys.argv[4]))
    # [1] a csv-file generated by NCBI, the file contains SRR code
    # [2] path saving downloaded fastq.gz files
    # [3] path saving tmp files
    # [4] number of processes
    end = time()
    print(end - start)
    # python36 download_sra.py [1] [2] [3] [4]
