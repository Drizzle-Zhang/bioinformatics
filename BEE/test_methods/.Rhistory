sc$tl$umap(adata)
umap <- py_to_r(adata$obsm['X_umap'])
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
adata$obsm$X_pca <- pca.input
umap <- py_to_r(adata$obsm['X_pca'])
py_to_r(adata$obsm['X_pca'])
a = py_to_r(adata$obsm['X_pca'])
bbknn$bbknn(adata,batch_key = 0)
b = py_to_r(adata$obsm['X_pca'])
anndata = import("anndata", convert = FALSE)
bbknn = import("bbknn", convert = FALSE)
sc = import("scanpy.api", convert = FALSE)
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
adata$obsm$X_pca <- pca.input
bbknn$bbknn(adata,batch_key = 0)
sc$tl$umap(adata)
umap <- py_to_r(adata$obsm['X_umap'])
adata
b <- adata$X
b <- py_to_r(adata$X)
adata <- anndata$AnnData(X = pca.input, obs = batches)
bbknn$bbknn(adata,batch_key = 0)
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
adata
a = py_to_r(adata$obsm['X_pca'])
View(df.info)
adata <- anndata$AnnData(X = pca.input, obs = batches)
adata$obsm$X_pca <- pca.input
anndata
adata <- anndata$AnnData(X = pca.input, obs = batches)
bbknn$bbknn(adata,batch_key = 0)
adata <- anndata$AnnData(X = 0, obs = batches)
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
adata$obsm$X_pca <- pca.input
bbknn$bbknn(adata,batch_key = 0)
adata$obsm$X_pca
a = py_to_r(adata$obsm['X_pca'])
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
adata$obsm['X_umap'] <- pca.input
bbknn$bbknn(adata,batch_key = 0)
adata$obsm['X_pca'] <- pca.input
adata$obsm$X_pca <- pca.input
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
a = py_to_r(adata$obsm['X_pca'])
adata$obsm$X_pca <- pca.input
a = py_to_r(adata$obsm['X_pca'])
adata
bbknn$bbknn(adata,batch_key = 0)
adata
adata <- bbknn$bbknn(adata,batch_key = 0,copy = TRUE)
adata
bbknn$bbknn(adata,batch_key = 0)
bbknn
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
anndata
adata
adata$data
adata$X
adata$uns
adata$obsm['X_pca'] <- r_to_py(pca.input)
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
adata$obsm['X_pca'] <- r_to_py(pca.input)
adata$obsm['X_pca']
r_to_py(pca.input)
adata$obsm['X_pca'] <- r_to_py(pca.input)
adata$obsm['X_pca'] = r_to_py(pca.input)
anndata = import("anndata", convert = FALSE)
bbknn = import("bbknn", convert = FALSE)
sc = import("scanpy.api", convert = FALSE)
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
adata$obsm['X_pca'] = r_to_py(pca.input)
anndata = import("anndata")
bbknn = import("bbknn")
sc = import("scanpy.api")
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
adata$obsm['X_pca']
adata$obsm['X_pca'] = r_to_py(pca.input)
anndata = import("anndata", convert = FALSE)
bbknn = import("bbknn", convert = FALSE)
sc = import("scanpy.api", convert = FALSE)
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
bbknn$bbknn(adata,batch_key = 0)
bbknn$bbknn_pca_matrix(pca = pca.input, batch_list = batches)
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
bbknn$bbknn(adata,batch_key = 0)
adata
adata$uns
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
# adata$obsm['X_pca'] <- r_to_py(pca.input)
bbknn$bbknn(adata,batch_key = 0)
sc$tl$umap(adata)
umap <- py_to_r(adata$obsm['X_umap'])
object.bbknn <- CreateSeuratObject(counts = mtx.norm)
object.bbknn@reductions$umap <- CreateDimReducObject(
embeddings = umap, key = 'UMAP_', assay = 'RNA'
)
mtx.norm <- as.matrix(object@assays$RNA@data)[object@assays$RNA@var.features,]
object.bbknn <- CreateSeuratObject(counts = mtx.norm)
object.bbknn@reductions$umap <- CreateDimReducObject(
embeddings = umap, key = 'UMAP_', assay = 'RNA'
)
DimPlot(
object, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
setwd("~/my_git/bioinformatics/BEE/test_methods")
source('functions_evaluator.R')
library(ggplot2)
# read data
root.path <- '/home/drizzle_zhang/Desktop/single_cell/BEE/real_data'
folder.data <- '10X_balance'
pc.num <- 50
path.in <- paste(root.path, folder.data, sep = '/')
path <- paste(path.in, 'output1', sep = '/')
dir.create(path)
file.mtx <- paste(path.in, 'matrix.txt', sep = '/')
file.meta <- paste(path.in, 'meta.txt', sep = '/')
file.info <-
'/home/drizzle_zhang/Desktop/single_cell/BEE/real_data/lab_info.txt'
df.mtx <- read.table(file.mtx, sep = '\t', header = T, stringsAsFactors = F)
row.names(df.mtx) <- df.mtx[, 'Gene']
df.mtx['Gene'] <- NULL
df.mtx <- na.omit(df.mtx)
df.meta <- read.table(file.meta, sep = '\t', header = T, stringsAsFactors = F)
df.meta$column <- names(df.mtx)
# select data
# select_folders <- c('MouseArcME_SingleCell_JN2017',
#                     'MouseCerebralcortex_SingleCell_Loo2018')
select_folders <- c('MouseEmbryo_SingleCell_PijuanSala2019',
'MouseGastrulation_SingleCell_Ximena2017')
df.meta <- df.meta[df.meta$folder %in% select_folders,]
cells <- df.meta$column
df.mtx <- df.mtx[, cells]
groups <- df.meta$cell
df.info <- read.delim(file.info, stringsAsFactors = F)
batches <- c()
for (batch in df.meta$folder) {
batches <- c(batches, df.info[df.info$folder == batch, 'author'])
}
label <- c()
timeing <- c()
df.result <- data.frame()
# origin
time1 <- Sys.time()
object <- preprocess.data(df.mtx, batches, groups, num.pc = pc.num)
mtx.norm <- as.matrix(object@assays$RNA@data)[object@assays$RNA@var.features,]
library(reticulate)
use_python("~/tools/anaconda3/bin/python3")
anndata = import("anndata", convert = FALSE)
bbknn = import("bbknn", convert = FALSE)
sc = import("scanpy.api", convert = FALSE)
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
# adata$obsm['X_pca'] <- r_to_py(pca.input)
bbknn$bbknn(adata,batch_key = 0)
sc$tl$umap(adata)
umap <- py_to_r(adata$obsm['X_umap'])
DimPlot(
object, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
DimPlot(
object.bbknn, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
class(umap.bbknn)
umap.bbknn <- py_to_r(adata$obsm['X_umap'])
class(umap.bbknn)
str(umap.bbknn)
dimnames(umap.bbknn)[[1]] <- dimnames(mtx.norm)[[2]]
str(umap.bbknn)
umap.bbknn <- py_to_r(adata$obsm['X_umap'])
dimnames(umap.bbknn)[[1]] <- dimnames(mtx.norm)[[2]]
object.bbknn <- CreateSeuratObject(counts = mtx.norm)
object.bbknn@reductions$umap <- CreateDimReducObject(
embeddings = umap.bbknn, key = 'UMAP_', assay = 'RNA'
)
DimPlot(
object.bbknn, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
object.mnn@meta.data <- object@meta.data
object.bbknn@meta.data <- object@meta.data
DimPlot(
object.bbknn, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
a=adata$obsm['X_pca']
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$pp$bbknn(anndata)
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
sc$pp$bbknn(anndata)
pca.input <- object@reductions$pca@cell.embeddings
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
# adata$obsm['X_pca'] <- r_to_py(pca.input)
sc$pp$bbknn(adata)
sc$tl$umap(adata)
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$tl$pca(adata)
sc$pp$bbknn(adata)
sc$pp$bbknn(adata, batch_key = 0)
adata <- anndata$AnnData(X = pca.input, obs = batches)
sc$pp$bbknn(adata, batch_key = 0)
adata$obsm$X_pca <- r_to_py(pca.input)
adata <- anndata$AnnData(X = pca.input, obs = batches)
adata$obsm['X_pca'] <- r_to_py(pca.input)
adata$obsm$X_pca <- r_to_py(pca.input)
adata <- anndata$AnnData(X = pca.input, obs = batches)
adata$obsm$X_pca <- r_to_py(pca.input)
adata
sc$pp$bbknn(adata, batch_key = 0)
adata$obsm$X_pca <- r_to_py(pca.input)
adata$obsm$to_df
source_python('bbknn.py')
a <- bbknn(pca.input, batches)
pca.input <- object@reductions$pca@cell.embeddings
out.bbknn <- bbknn(pca.input, batches)
dimnames(out.bbknn$umap)[[1]] <- dimnames(mtx.norm)[[2]]
object.bbknn <- CreateSeuratObject(counts = mtx.norm)
object.bbknn@reductions$umap <- CreateDimReducObject(
embeddings = umap.bbknn, key = 'UMAP_', assay = 'RNA'
)
object.bbknn@meta.data <- object@meta.data
DimPlot(
object.bbknn, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
source_python('bbknn.py')
source_python('bbknn.py')
umap.bbknn <- bbknn(pca.input, batches)
umap.bbknn <- bbknn(pca.input, batches, pc.num)
source_python('bbknn.py')
umap.bbknn <- bbknn(pca.input, batches, pc.num)
dimnames(umap.bbknn)[[1]] <- dimnames(mtx.norm)[[2]]
object.bbknn <- CreateSeuratObject(counts = mtx.norm)
object.bbknn@reductions$umap <- CreateDimReducObject(
embeddings = umap.bbknn, key = 'UMAP_', assay = 'RNA'
)
object.bbknn@meta.data <- object@meta.data
DimPlot(
object.bbknn, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
pc.num <- 30
evaluate.sil(object.mnn)
evaluate.sil(object.bbknn)
batch.list <- list()
cell.names <- dimnames(object@assays$RNA@counts)[[2]]
for (batch in unique(batches)) {
sub.cells <- cell.names[object@meta.data$batch == batch]
object.sub <- CreateSeuratObject(counts = mtx.norm[,lab.cells])
object.sub@assays$RNA <- CreateAssayObject(data = mtx.norm[,lab.cells])
object.sub@commands$NormalizeData.RNA <- object@commands$NormalizeData.RNA
object.sub@commands$FindVariableFeatures.RNA <-
object@commands$FindVariableFeatures.RNA
object.sub@assays$RNA@var.features <- object@assays$RNA@var.features
batch.list[[batch]] <- object.sub
}
anchors <- FindIntegrationAnchors(object.list = batch.list, dims = 1:pc.num)
object.integrated <- IntegrateData(anchorset = anchors, dims = 1:pc.num)
batch.list <- list()
cell.names <- dimnames(object@assays$RNA@counts)[[2]]
for (batch in unique(batches)) {
sub.cells <- cell.names[object@meta.data$batch == batch]
object.sub <- CreateSeuratObject(counts = mtx.norm[,sub.cells])
object.sub@assays$RNA <- CreateAssayObject(data = mtx.norm[,sub.cells])
object.sub@commands$NormalizeData.RNA <- object@commands$NormalizeData.RNA
object.sub@commands$FindVariableFeatures.RNA <-
object@commands$FindVariableFeatures.RNA
object.sub@assays$RNA@var.features <- object@assays$RNA@var.features
batch.list[[batch]] <- object.sub
}
anchors <- FindIntegrationAnchors(object.list = batch.list, dims = 1:pc.num)
object.integrated <- IntegrateData(anchorset = anchors, dims = 1:pc.num)
anchors <- FindIntegrationAnchors(object.list = batch.list, dims = 1:30)
anchors <- FindIntegrationAnchors(
object.list = batch.list, dims = 1:30, k.filter = 100)
anchors <- FindIntegrationAnchors(
object.list = batch.list, dims = 1:30, k.filter = 150)
anchors <- FindIntegrationAnchors(
object.list = batch.list, dims = 1:30, k.filter = 100)
anchors <- FindIntegrationAnchors(
object.list = batch.list, dims = 1:pc.num, k.filter = 100)
object.integrated <- IntegrateData(anchorset = anchors, dims = 1:pc.num)
object.integrated@commands$NormalizeData.RNA <-
object@commands$NormalizeData.RNA
object.integrated@commands$FindVariableFeatures.RNA <-
object@commands$FindVariableFeatures.RNA
preprocess.data(object.integrated, batches, groups, num.pc = pc.num)
library(scran)
# library(psych)
# library(batchelor)
# library(SingleCellExperiment)
# sce <- SingleCellExperiment(assays = list(logcounts = mtx.norm))
# out.mnn <- fastMNN(sce, batch = as.factor(object@meta.data$batch),
#                     d = pc.num, k = 20)
input.mnn <- list()
cell.names <- dimnames(object@assays$RNA@counts)[[2]]
for (lab in unique(object@meta.data$batch)) {
lab.cells <- cell.names[object@meta.data$batch == lab]
input.mnn[[lab]] <- mtx.norm[,lab.cells]
}
if (length(input.mnn) == 2) {
out.mnn <- fastMNN(input.mnn[[1]], input.mnn[[2]], d = pc.num, k = 20)
}
if (length(input.mnn) == 3) {
out.mnn <- fastMNN(input.mnn[[1]], input.mnn[[2]], input.mnn[[3]],
d = pc.num, k = 20)
}
if (length(input.mnn) == 4) {
out.mnn <- fastMNN(input.mnn[[1]], input.mnn[[2]], input.mnn[[3]],
input.mnn[[4]], d = pc.num, k = 20)
}
if (length(input.mnn) == 5) {
out.mnn <- fastMNN(input.mnn[[1]], input.mnn[[2]], input.mnn[[3]],
input.mnn[[4]], input.mnn[[5]], d = pc.num, k = 20)
}
if (length(input.mnn) == 6) {
out.mnn <- fastMNN(input.mnn[[1]], input.mnn[[2]], input.mnn[[3]],
input.mnn[[4]], input.mnn[[5]], input.mnn[[6]],
d = pc.num, k = 20)
}
View(out.mnn)
input.mnn <- list()
cell.names <- dimnames(object@assays$RNA@counts)[[2]]
input.cells <- c()
for (lab in unique(object@meta.data$batch)) {
lab.cells <- cell.names[object@meta.data$batch == lab]
input.mnn[[lab]] <- mtx.norm[,lab.cells]
input.cells <- c(input.cells, lab.cells)
}
input.cells == cell.names
dimnames(object.integrated@assays$integrated@data)[[2]] ==
dimnames(object@assays$RNA@counts)[[2]]
object.combat <- CreateSeuratObject(counts = mtx.combat)
object.combat@assays$RNA <- CreateAssayObject(data = mtx.combat)
library(sva)
mtx.combat <- ComBat(dat = mtx.norm, batch = object@meta.data$batch)
time4 <- Sys.time()
object.combat <- CreateSeuratObject(counts = mtx.combat)
object.combat@assays$RNA <- CreateAssayObject(data = mtx.combat)
batch.list <- list()
cell.names <- dimnames(object@assays$RNA@counts)[[2]]
for (batch in unique(batches)) {
sub.cells <- cell.names[object@meta.data$batch == batch]
object.sub <- CreateSeuratObject(counts = mtx.norm[,sub.cells])
object.sub@assays$RNA <- CreateAssayObject(data = mtx.norm[,sub.cells])
object.sub@commands$NormalizeData.RNA <- object@commands$NormalizeData.RNA
object.sub@commands$FindVariableFeatures.RNA <-
object@commands$FindVariableFeatures.RNA
batch.list[[batch]] <- object.sub
}
anchors <- FindIntegrationAnchors(
object.list = batch.list, dims = 1:pc.num, k.filter = 100)
object.integrated <- IntegrateData(anchorset = anchors, dims = 1:pc.num)
batch.list <- list()
cell.names <- dimnames(object@assays$RNA@counts)[[2]]
for (batch in unique(batches)) {
sub.cells <- cell.names[object@meta.data$batch == batch]
object.sub <- CreateSeuratObject(counts = mtx.norm[,sub.cells])
object.sub@assays$RNA <- CreateAssayObject(data = mtx.norm[,sub.cells])
object.sub@commands$NormalizeData.RNA <- object@commands$NormalizeData.RNA
object.sub@commands$FindVariableFeatures.RNA <-
object@commands$FindVariableFeatures.RNA
object.sub@assays$RNA@var.features <- object@assays$RNA@var.features
batch.list[[batch]] <- object.sub
}
anchors <- FindIntegrationAnchors(
object.list = batch.list, dims = 1:pc.num, k.filter = 100)
object.integrated <- IntegrateData(anchorset = anchors, dims = 1:pc.num)
object.integrated <- ScaleData(
object.integrated, assay = 'integrated',
feature = object@assays$RNA@var.features,
vars.to.regress = 'nCount_RNA', verbose = F)
object.integrated <- RunPCA(object.integrated, npcs = pc.num, verbose = F)
object.integrated <- RunUMAP(
object.integrated, reduction = 'pca', dims = 1:pc.num)
if (dimnames(object.integrated@assays$integrated@data)[[2]] == cell.names) {
object.integrated@meta.data <- object@meta.data
} else {
print("Error: Seurat Cell order not match")
}
dimnames(object.integrated@assays$integrated@data)[[2]] == cell.names
if (dimnames(object.integrated@assays$integrated@data)[[2]] == cell.names) {
object.integrated@meta.data <- object@meta.data
} else {
print("Error: Seurat Cell order not match")
}
sum(dimnames(object.integrated@assays$integrated@data)[[2]] == cell.names)
sum(dimnames(object.integrated@assays$integrated@data)[[2]] == cell.names) == length(cell.names)
if (sum(dimnames(object.integrated@assays$integrated@data)[[2]] ==
cell.names) == length(cell.names)) {
object.integrated@meta.data <- object@meta.data
} else {
print("Error: Seurat Cell order not match")
}
DimPlot(
object.integrated, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
batch.list <- list()
cell.names <- dimnames(object@assays$RNA@counts)[[2]]
for (batch in unique(batches)) {
sub.cells <- cell.names[object@meta.data$batch == batch]
object.sub <- CreateSeuratObject(counts = mtx.norm[,sub.cells])
object.sub@assays$RNA <- CreateAssayObject(data = mtx.norm[,sub.cells])
object.sub@commands$NormalizeData.RNA <- object@commands$NormalizeData.RNA
object.sub@commands$FindVariableFeatures.RNA <-
object@commands$FindVariableFeatures.RNA
object.sub@assays$RNA@var.features <- object@assays$RNA@var.features
batch.list[[batch]] <- object.sub
}
anchors <- FindIntegrationAnchors(
object.list = batch.list, dims = 1:pc.num, k.filter = 100)
object.integrated <- IntegrateData(anchorset = anchors, dims = 1:pc.num)
object.integrated <- ScaleData(
object.integrated, assay = 'integrated',
feature = object@assays$RNA@var.features,
verbose = F)
object.integrated <- RunPCA(object.integrated, npcs = pc.num, verbose = F)
object.integrated <- RunUMAP(
object.integrated, reduction = 'pca', dims = 1:pc.num)
if (sum(dimnames(object.integrated@assays$integrated@data)[[2]] ==
cell.names) == length(cell.names)) {
object.integrated@meta.data <- object@meta.data
} else {
print("Error: Seurat Cell order not match")
}
DimPlot(
object.integrated, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
DimPlot(
object, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
source('~/my_git/bioinformatics/BEE/test_methods/functions_evaluator.R')
object <- preprocess.data(df.mtx, batches, groups, num.pc = pc.num)
DimPlot(
object, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
source('~/my_git/bioinformatics/BEE/test_methods/functions_evaluator.R')
DimPlot(
object.combat, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
object.combat <- CreateSeuratObject(counts = mtx.combat)
object.combat@assays$RNA <- CreateAssayObject(data = mtx.combat)
object.combat@commands$NormalizeData.RNA <- object@commands$NormalizeData.RNA
object.combat@commands$FindVariableFeatures.RNA <-
object@commands$FindVariableFeatures.RNA
object.combat@assays$RNA@var.features <- object@assays$RNA@var.features
object.combat <-
preprocess.data(object.combat, batches, groups, num.pc = pc.num)
DimPlot(
object.combat, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
library(reticulate)
source_python('bbknn.py')
library(reticulate)
source_python('bbknn.py')
library(reticulate)
use_python("~/tools/anaconda3/bin/python3")
source_python('bbknn.py')
library(reticulate)
use_python("~/tools/anaconda3/bin/python3")
source_python('bbknn.py')
pca.input <- object@reductions$pca@cell.embeddings
umap.bbknn <- bbknn_py(pca.input, batches, pc.num)
library(reticulate)
use_python("~/tools/anaconda3/bin/python3")
source_python('bbknnpy.py')
pca.input <- object@reductions$pca@cell.embeddings
umap.bbknn <- bbknn_py(pca.input, batches, pc.num)
library(reticulate)
use_python("~/tools/anaconda3/bin/python3")
source_python('bbknnpy.py')
difftime(time8, time7, units = 'secs')
source('https://raw.githubusercontent.com/jumphone/BEER/master/BEER.R')
