fit$fstatistic[2],
fit$fstatistic[3]))
}
# p.adj.value <- p.adjust(p.value)
# calculate ldaReg
svd <- fit.lda$svd
var <- svd^2 / sum(svd^2)
ldaReg <- sum(var * r.squared)
df.group <- rbind(df.group,
data.frame(group = group, weight = weight,
ldaReg = ldaReg))
}
ldaReg.batch <- (df.group$ldaReg*df.group$weight)/sum(df.group$weight)
ldaReg.batch <- 1 - ldaReg.batch
harmonic.mean <- 2*sil.group*ldaReg.batch/(sil.group + ldaReg.batch)
harmonic.mean
ldaReg.batch
df.group
batch.factor <- as.factor(object@meta.data$batch)
batch.init <- as.numeric(batch.factor)
groups <- unique(group.init)
df.group <- data.frame()
for (group in groups) {
sub.pca.data <- pca.data[group.init == group,]
sub.batch.init <- batch.init[group.init == group]
sub.batch.factor <- batch.factor[group.init == group]
weight <- length(sub.batch.init)
# LDA
lda.input <- as.data.frame(sub.pca.data)
lda.input$batch <- sub.batch.init
fit.lda <- lda(formula = batch ~ .,data = lda.input, method = 'mve')
lda.data <- sub.pca.data %*% fit.lda$scaling
p.value <- c()
r.squared <- c()
for (i in 1:dim(lda.data)[2]) {
fit <- summary(lm(lda.data[, i] ~ sub.batch.factor))
r.squared <- c(r.squared, fit$r.squared)
p.value <- c(p.value,
1 - pf(fit$fstatistic[1],
fit$fstatistic[2],
fit$fstatistic[3]))
}
# p.adj.value <- p.adjust(p.value)
# calculate ldaReg
svd <- fit.lda$svd
var <- svd^2 / sum(svd^2)
ldaReg <- sum(var * r.squared)
df.group <- rbind(df.group,
data.frame(group = group, weight = weight,
ldaReg = ldaReg))
}
ldaReg.batch <- (df.group$ldaReg*df.group$weight)/sum(df.group$weight)
ldaReg.batch <- 1 - ldaReg.batch
harmonic.mean <- 2*sil.group*ldaReg.batch/(sil.group + ldaReg.batch)
ldaReg.batch
source('~/my_git/bioinformatics/BEE/sim_data/functions_evaluator.R')
df.group$ldaReg*df.group$weight
sum(df.group$weight)
df.group$ldaReg
ldaReg.batch
(df.group$ldaReg*df.group$weight)
(df.group$ldaReg*df.group$weight)/400
(df.group$ldaReg*df.group$weight)/sum(df.group$weight)
ldaReg.batch <- sum((df.group$ldaReg*df.group$weight)/sum(df.group$weight))
ldaReg.batch <- 1 - ldaReg.batch
ldaReg.batch
harmonic.mean
harmonic.mean <- 2*sil.group*ldaReg.batch/(sil.group + ldaReg.batch)
harmonic.mean
source('~/my_git/bioinformatics/BEE/sim_data/functions_evaluator.R')
input <- data.frame()
for (facLoc in vec.facLoc) {
for (de.facLoc in vec.de.facLoc) {
input <- rbind(
input,
data.frame(input = facLoc, de.facLoc = de.facLoc)
)
}
}
input
input <- list()
idx <- 0
for (facLoc in vec.facLoc) {
for (de.facLoc in vec.de.facLoc) {
idx <- idx + 1
input[[idx]]$facLoc <- facLoc
input[[idx]]$de.facLoc <- de.facLoc
}
}
input[[1]]
c(c(1,2))
c(c(1,2),c(3,4))
c(list(a=1))
c(list(a=1),list(b=2))
input <- c()
for (facLoc in vec.facLoc) {
for (de.facLoc in vec.de.facLoc) {
input.list <- list(facLoc = facLoc, de.facLoc = de.facLoc)
input <- c(input, input.list)
}
}
input
input <- data.frame()
for (facLoc in vec.facLoc) {
for (de.facLoc in vec.de.facLoc) {
input <- rbind(
input,
data.frame(input = facLoc, de.facLoc = de.facLoc)
)
}
}
input
input <- t(input)
input
input <- data.frame()
for (facLoc in vec.facLoc) {
for (de.facLoc in vec.de.facLoc) {
input <- rbind(
input,
data.frame(facLoc = facLoc, de.facLoc = de.facLoc)
)
}
}
input <- t(input)
input
input[,1]
input[,1]$facLoc
a = input[,1]
names(a)
a["facLoc"]
input <- list()
input[[idx]] <- 1
input <- list()
idx <- 0
for (facLoc in vec.facLoc) {
for (de.facLoc in vec.de.facLoc) {
idx <- idx + 1
input.list <- list(facLoc = facLoc, de.facLoc = de.facLoc)
input[[idx]] <- input.list
}
}
input
load('/home/drizzle_zhang/Desktop/sharing folder/sr_list_SS2.RData')
View(sr_list)
str(sr_list)
source('functions_evaluator.R')
library(ggplot2)
# read data
path <- '/home/drizzle_zhang/Desktop/single_cell/BEE/real_data/10X_balance'
file.mtx <- paste(path, 'matrix.txt', sep = '/')
file.meta <-  paste(path, 'meta.txt', sep = '/')
file.info <-
'/home/drizzle_zhang/Desktop/single_cell/BEE/real_data/lab_info.txt'
df.mtx <- read.table(file.mtx, sep = '\t', header = T, stringsAsFactors = F)
row.names(df.mtx) <- df.mtx[, 'Gene']
df.mtx['Gene'] <- NULL
df.mtx <- na.omit(df.mtx)
df.meta <- read.table(file.meta, sep = '\t', header = T, stringsAsFactors = F)
groups <- df.meta$cell
df.info <- read.delim(file.info, stringsAsFactors = F)
batches <- c()
for (batch in df.meta$folder) {
batches <- c(batches, df.info[df.info$folder == batch, 'author'])
}
label <- c()
timeing <- c()
df.result <- data.frame()
# origin
time1 <- Sys.time()
object <- preprocess.data(df.mtx, batches, groups, num.pc = 50)
plot.origin <- DimPlot(
object, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
ggsave(plot = plot.origin, filename = 'UMAP_origin.png', path = path,
units = 'cm', height = 15, width = 25)
result.origin <- evaluate.two.dims(object)
df.result <- rbind(df.result, result.origin)
time2 <- Sys.time()
timeing <- c(timeing, time2 - time1)
label <- c(label, 'Origin')
# normalized data
mtx.norm <- as.matrix(object@assays$RNA@data)[object@assays$RNA@var.features,]
# combat
library(sva)
time3 <- Sys.time()
mtx.combat <- ComBat(dat = mtx.norm, batch = object@meta.data$batch)
object.combat <- CreateSeuratObject(counts = mtx.combat)
object.combat@assays$RNA <- CreateAssayObject(data = mtx.combat)
object.combat@commands$NormalizeData.RNA <- object@commands$NormalizeData.RNA
object.combat <- preprocess.data(object.combat, batches, groups, num.pc = 50)
plot.combat <- DimPlot(
object.combat, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
ggsave(plot = origin.plot, filename = 'UMAP_combat.png', path = path,
units = 'cm', height = 15, width = 25)
result.combat <- evaluate.two.dims(object.combat)
df.result <- rbind(df.result, result.combat)
time4 <- Sys.time()
timeing <- c(timeing, time4 - time3)
label <- c(label, 'ComBat')
# BEER
source('https://raw.githubusercontent.com/jumphone/BEER/master/BEER.R')
time5 <- Sys.time()
mybeer <- BEER(mtx.norm, object@meta.data$batch, GNUM = 30, PCNUM = 50,
ROUND = 1, GN = 2000, SEED = 1, COMBAT = TRUE)
object.beer <- CreateSeuratObject(counts = mtx.norm)
object.beer@reductions$pca <- CreateDimReducObject(
embeddings = mybeer$seurat@reductions$pca@cell.embeddings,
loadings = mybeer$seurat@reductions$pca@feature.loadings,
key = 'PC_', assay = 'RNA'
)
object.beer <- RunUMAP(
object.beer, reduction = 'pca', dims = 1:50, n.components = 2,
verbose = F)
object.beer@meta.data <- object@meta.data
plot.beer <- DimPlot(
object.beer, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
ggsave(plot = plot.beer, filename = 'UMAP_beer.png', path = path,
units = 'cm', height = 15, width = 25)
result.beer <- evaluate.two.dims(object.beer)
df.result <- rbind(df.result, result.beer)
time6 <- Sys.time()
timeing <- c(timeing, time6 - time5)
label <- c(label, 'BEER')
setwd("~/my_git/bioinformatics/BEE/test_methods")
source('functions_evaluator.R')
library(ggplot2)
# read data
path <- '/home/drizzle_zhang/Desktop/single_cell/BEE/real_data/10X_balance'
file.mtx <- paste(path, 'matrix.txt', sep = '/')
file.meta <-  paste(path, 'meta.txt', sep = '/')
file.info <-
'/home/drizzle_zhang/Desktop/single_cell/BEE/real_data/lab_info.txt'
df.mtx <- read.table(file.mtx, sep = '\t', header = T, stringsAsFactors = F)
row.names(df.mtx) <- df.mtx[, 'Gene']
df.mtx['Gene'] <- NULL
df.mtx <- na.omit(df.mtx)
df.meta <- read.table(file.meta, sep = '\t', header = T, stringsAsFactors = F)
groups <- df.meta$cell
df.info <- read.delim(file.info, stringsAsFactors = F)
batches <- c()
for (batch in df.meta$folder) {
batches <- c(batches, df.info[df.info$folder == batch, 'author'])
}
label <- c()
timeing <- c()
df.result <- data.frame()
# origin
time1 <- Sys.time()
object <- preprocess.data(df.mtx, batches, groups, num.pc = 50)
plot.origin <- DimPlot(
object, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
ggsave(plot = plot.origin, filename = 'UMAP_origin.png', path = path,
units = 'cm', height = 15, width = 25)
result.origin <- evaluate.two.dims(object)
df.result <- rbind(df.result, result.origin)
time2 <- Sys.time()
timeing <- c(timeing, time2 - time1)
label <- c(label, 'Origin')
# normalized data
mtx.norm <- as.matrix(object@assays$RNA@data)[object@assays$RNA@var.features,]
# combat
library(sva)
time3 <- Sys.time()
mtx.combat <- ComBat(dat = mtx.norm, batch = object@meta.data$batch)
object.combat <- CreateSeuratObject(counts = mtx.combat)
object.combat@assays$RNA <- CreateAssayObject(data = mtx.combat)
object.combat@commands$NormalizeData.RNA <- object@commands$NormalizeData.RNA
object.combat <- preprocess.data(object.combat, batches, groups, num.pc = 50)
plot.combat <- DimPlot(
object.combat, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
ggsave(plot = origin.plot, filename = 'UMAP_combat.png', path = path,
units = 'cm', height = 15, width = 25)
result.combat <- evaluate.two.dims(object.combat)
df.result <- rbind(df.result, result.combat)
time4 <- Sys.time()
timeing <- c(timeing, time4 - time3)
label <- c(label, 'ComBat')
# BEER
source('https://raw.githubusercontent.com/jumphone/BEER/master/BEER.R')
time5 <- Sys.time()
mybeer <- BEER(mtx.norm, object@meta.data$batch, GNUM = 30, PCNUM = 50,
ROUND = 1, GN = 2000, SEED = 1, COMBAT = TRUE)
object.beer <- CreateSeuratObject(counts = mtx.norm)
object.beer@reductions$pca <- CreateDimReducObject(
embeddings = mybeer$seurat@reductions$pca@cell.embeddings,
loadings = mybeer$seurat@reductions$pca@feature.loadings,
key = 'PC_', assay = 'RNA'
)
object.beer <- RunUMAP(
object.beer, reduction = 'pca', dims = 1:50, n.components = 2,
verbose = F)
object.beer@meta.data <- object@meta.data
plot.beer <- DimPlot(
object.beer, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
ggsave(plot = plot.beer, filename = 'UMAP_beer.png', path = path,
units = 'cm', height = 15, width = 25)
result.beer <- evaluate.two.dims(object.beer)
df.result <- rbind(df.result, result.beer)
time6 <- Sys.time()
timeing <- c(timeing, time6 - time5)
label <- c(label, 'BEER')
df.result$label <- label
df.result$timeing <- timeing
df.result
str(object@meta.data$batch)
library(scran)
library(SingleCellExperiment)
sce <- SingleCellExperiment(assays = list(logcounts = mtx.norm))
out.mnn <- fastMNN(sce, batch = as.factor(object@meta.data$batch),
d = 50, k = 20)
View(sce)
View(sce)
class(sce)
length(as.factor(object@meta.data$batch))
dim(sce)
out.mnn <- fastMNN(sce, batch = as.factor(object@meta.data$batch),
d = 50, k = 20)
table(as.factor(object@meta.data$batch))
df.result$label <- label
df.result$timeing <- timeing
df.result
pc.num <- 30
label <- c()
timeing <- c()
df.result <- data.frame()
# origin
time1 <- Sys.time()
object <- preprocess.data(df.mtx, batches, groups, num.pc = pc.num)
plot.origin <- DimPlot(
object, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
ggsave(plot = plot.origin, filename = 'UMAP_origin.png', path = path,
units = 'cm', height = 15, width = 25)
result.origin <- evaluate.two.dims(object)
df.result <- rbind(df.result, result.origin)
time2 <- Sys.time()
timeing <- c(timeing, time2 - time1)
label <- c(label, 'Origin')
# normalized data
mtx.norm <- as.matrix(object@assays$RNA@data)[object@assays$RNA@var.features,]
# combat
library(sva)
time3 <- Sys.time()
mtx.combat <- ComBat(dat = mtx.norm, batch = object@meta.data$batch)
object.combat <- CreateSeuratObject(counts = mtx.combat)
object.combat@assays$RNA <- CreateAssayObject(data = mtx.combat)
object.combat@commands$NormalizeData.RNA <- object@commands$NormalizeData.RNA
object.combat <-
preprocess.data(object.combat, batches, groups, num.pc = pc.num)
plot.combat <- DimPlot(
object.combat, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
ggsave(plot = origin.plot, filename = 'UMAP_combat.png', path = path,
units = 'cm', height = 15, width = 25)
result.combat <- evaluate.two.dims(object.combat)
df.result <- rbind(df.result, result.combat)
time4 <- Sys.time()
timeing <- c(timeing, time4 - time3)
label <- c(label, 'ComBat')
# BEER
source('https://raw.githubusercontent.com/jumphone/BEER/master/BEER.R')
time5 <- Sys.time()
mybeer <- BEER(mtx.norm, object@meta.data$batch, GNUM = 30, PCNUM = pc.num,
ROUND = 1, GN = 2000, SEED = 1, COMBAT = TRUE)
object.beer <- CreateSeuratObject(counts = mtx.norm)
object.beer@reductions$pca <- CreateDimReducObject(
embeddings = mybeer$seurat@reductions$pca@cell.embeddings,
loadings = mybeer$seurat@reductions$pca@feature.loadings,
key = 'PC_', assay = 'RNA'
)
object.beer <- RunUMAP(
object.beer, reduction = 'pca', dims = 1:pc.num, n.components = 2,
verbose = F)
object.beer@meta.data <- object@meta.data
plot.beer <- DimPlot(
object.beer, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
ggsave(plot = plot.beer, filename = 'UMAP_beer.png', path = path,
units = 'cm', height = 15, width = 25)
result.beer <- evaluate.two.dims(object.beer)
df.result <- rbind(df.result, result.beer)
time6 <- Sys.time()
timeing <- c(timeing, time6 - time5)
label <- c(label, 'BEER')
df.result$label <- label
df.result$timeing <- timeing
df.result
input.MNN <- list()
cell.names <- dimnames(object@assays$RNA@counts)[[2]]
for (lab in unique(object@meta.data$batch)) {
lab.cells <- cell.names[object@meta.data$batch == lab]
input.MNN[[lab]] <- mtx.norm[,lab.cells]
}
pc.num <- 50
label <- c()
timeing <- c()
df.result <- data.frame()
# origin
time1 <- Sys.time()
object <- preprocess.data(df.mtx, batches, groups, num.pc = pc.num)
plot.origin <- DimPlot(
object, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
ggsave(plot = plot.origin, filename = 'UMAP_origin.png', path = path,
units = 'cm', height = 15, width = 25)
result.origin <- evaluate.two.dims(object)
df.result <- rbind(df.result, result.origin)
time2 <- Sys.time()
timeing <- c(timeing, time2 - time1)
label <- c(label, 'Origin')
# normalized data
mtx.norm <- as.matrix(object@assays$RNA@data)[object@assays$RNA@var.features,]
# combat
library(sva)
time3 <- Sys.time()
mtx.combat <- ComBat(dat = mtx.norm, batch = object@meta.data$batch)
object.combat <- CreateSeuratObject(counts = mtx.combat)
object.combat@assays$RNA <- CreateAssayObject(data = mtx.combat)
object.combat@commands$NormalizeData.RNA <- object@commands$NormalizeData.RNA
object.combat <-
preprocess.data(object.combat, batches, groups, num.pc = pc.num)
plot.combat <- DimPlot(
object.combat, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
ggsave(plot = origin.plot, filename = 'UMAP_combat.png', path = path,
units = 'cm', height = 15, width = 25)
result.combat <- evaluate.two.dims(object.combat)
df.result <- rbind(df.result, result.combat)
time4 <- Sys.time()
timeing <- c(timeing, time4 - time3)
label <- c(label, 'ComBat')
# BEER
source('https://raw.githubusercontent.com/jumphone/BEER/master/BEER.R')
time5 <- Sys.time()
mybeer <- BEER(mtx.norm, object@meta.data$batch, GNUM = 30, PCNUM = pc.num,
ROUND = 1, GN = 2000, SEED = 1, COMBAT = TRUE)
object.beer <- CreateSeuratObject(counts = mtx.norm)
object.beer@reductions$pca <- CreateDimReducObject(
embeddings = mybeer$seurat@reductions$pca@cell.embeddings,
loadings = mybeer$seurat@reductions$pca@feature.loadings,
key = 'PC_', assay = 'RNA'
)
object.beer <- RunUMAP(
object.beer, reduction = 'pca', dims = 1:pc.num, n.components = 2,
verbose = F)
object.beer@meta.data <- object@meta.data
plot.beer <- DimPlot(
object.beer, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
ggsave(plot = plot.beer, filename = 'UMAP_beer.png', path = path,
units = 'cm', height = 15, width = 25)
result.beer <- evaluate.two.dims(object.beer)
df.result <- rbind(df.result, result.beer)
time6 <- Sys.time()
timeing <- c(timeing, time6 - time5)
label <- c(label, 'BEER')
source('functions_evaluator.R')
library(ggplot2)
# read data
path <- '/home/drizzle_zhang/Desktop/single_cell/BEE/real_data/10X_balance'
file.mtx <- paste(path, 'matrix.txt', sep = '/')
file.meta <-  paste(path, 'meta.txt', sep = '/')
file.info <-
'/home/drizzle_zhang/Desktop/single_cell/BEE/real_data/lab_info.txt'
df.mtx <- read.table(file.mtx, sep = '\t', header = T, stringsAsFactors = F)
row.names(df.mtx) <- df.mtx[, 'Gene']
df.mtx['Gene'] <- NULL
df.mtx <- na.omit(df.mtx)
df.meta <- read.table(file.meta, sep = '\t', header = T, stringsAsFactors = F)
groups <- df.meta$cell
df.info <- read.delim(file.info, stringsAsFactors = F)
batches <- c()
for (batch in df.meta$folder) {
batches <- c(batches, df.info[df.info$folder == batch, 'author'])
}
pc.num <- 50
label <- c()
timeing <- c()
df.result <- data.frame()
# origin
time1 <- Sys.time()
object <- preprocess.data(df.mtx, batches, groups, num.pc = pc.num)
plot.origin <- DimPlot(
object, reductions = 'umap',
group.by = "group", shape.by = 'batch', pt.size = 1.5
)
ggsave(plot = plot.origin, filename = 'UMAP_origin.png', path = path,
units = 'cm', height = 15, width = 25)
result.origin <- evaluate.two.dims(object)
df.result <- rbind(df.result, result.origin)
time2 <- Sys.time()
timeing <- c(timeing, time2 - time1)
label <- c(label, 'Origin')
# normalized data
mtx.norm <- as.matrix(object@assays$RNA@data)[object@assays$RNA@var.features,]
